syntax="proto2";

package yamcs.protobuf.alarms;
option java_package = "org.yamcs.protobuf";

import "yamcs/protobuf/yamcs.proto";
import "yamcs/protobuf/mdb/mdb.proto";
import "yamcs/protobuf/pvalue/pvalue.proto";
import "google/protobuf/timestamp.proto";


message AcknowledgeInfo {
  optional string acknowledgedBy = 1;
  optional string acknowledgeMessage = 2;
  optional int64 yamcsAcknowledgeTime = 3 [deprecated = true];
  optional string acknowledgeTimeUTC = 4 [deprecated = true];
  optional google.protobuf.Timestamp acknowledgeTime = 5;
}

enum AlarmNotificationType {
    ACTIVE = 1;  // Initial active alarms at the moment of request
    TRIGGERED = 2;  // Whenever a new alarm triggers
    SEVERITY_INCREASED = 3;  // Whenever an alarm jumps severity
    UPDATED = 4;  // Whenever a value is updated (even if that value is not a violation by itself)
    ACKNOWLEDGED = 5;  // Whenever somebody acknowledged an alarm (it could be that it is still OOL)
    CLEARED = 6; // When the alarm was really cleared by the server (acknowledged && not OOL)
}
enum AlarmType {
    PARAMETER = 1;
    EVENT = 2;
}

enum AlarmSeverity {
    WATCH = 1;
    WARNING = 2;
    DISTRESS = 3;
    CRITICAL = 4;
    SEVERE = 5;
}

//the message contains a summary of an alarm applicable for Parameter or Event (possibly other in the future) alarms.
// it is sent over websocket as result of subscription with the type SUMMARY
message AlarmData {
  optional AlarmType type = 1;
  optional google.protobuf.Timestamp triggerTime =2 ;

  //for the parameter alarms, this is the id of the parameters
  // for the event alarms
  //   - the id.namespace is /yamcs/event/<EVENT_SOURCE>, unless the EVENT_SOURCE starts with a "/" in which case the namespace is just the <EVENT_SOURCE>
  //   - the id.name is the <EVENT_TYPE>
  optional NamedObjectId id = 3;

  //the sequence number allows to distinguish between multiple alarms for the same id
  optional uint32 seqNum = 4;

  optional AlarmSeverity severity = 5;

  //this represents the number of times the object was in alarm state
  optional uint32 violations = 6;
  //this represents the number of samples received for the object
  optional uint32 count = 7;
  
  optional AcknowledgeInfo acknowledgeInfo = 8;
  optional AlarmNotificationType notificationType = 9;

  optional ParameterAlarmData parameterDetail = 10;
  optional EventAlarmData eventDetail = 11;
}

message ParameterAlarmData {
  optional pvalue.ParameterValue triggerValue = 1;
  optional pvalue.ParameterValue mostSevereValue = 2;
  optional pvalue.ParameterValue currentValue = 3;
  optional mdb.ParameterInfo parameter = 4;
}

message EventAlarmData {
  optional Event triggerEvent = 1;
  optional Event mostSevereEvent = 2;
  optional Event currentEvent = 3;
}
