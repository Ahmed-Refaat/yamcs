syntax="proto2";
  
package yamcs.protobuf.cfdp;

option java_package = "org.yamcs.protobuf";
option java_outer_classname = "CfdpProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "yamcs/api/annotations.proto";
 
service CfdpApi {

  // List transfers
  rpc ListTransfers(ListTransfersRequest) returns (ListTransfersResponse) {
    option (yamcs.api.route) = {
      get: "/api/cfdp/{instance}/transfers"
    };
  }
  
  // Get a transfer
  rpc GetTransfer(GetTransferRequest) returns (TransferInfo) {
    option (yamcs.api.route) = {
      get: "/api/cfdp/{instance}/transfers/{id}"
    };
  }
  
  // Create a transfer
  rpc CreateTransfer(CreateTransferRequest) returns (TransferInfo) {
    option (yamcs.api.route) = {
      post: "/api/cfdp/{instance}/transfers"
      body: "*"
    };
  }
  
  // Update a transfer
  rpc UpdateTransfer(EditTransferRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      patch: "/api/cfdp/{instance}/transfers/{id}"
      body: "*"
    };
  }
}

enum TransferDirection {
  UPLOAD = 1;
  DOWNLOAD = 2;
}

enum TransferState {
  RUNNING = 1;
  PAUSED = 2;
  FAILED = 3;
  COMPLETED = 4;
}

message RemoteFile {
  required string filepath = 1;
  required bool isDirectory = 2;
}

//message sent as reponse to the info and also when starting a new transfer
message TransferInfo {
  optional uint64 transactionId = 1;
  optional google.protobuf.Timestamp startTime = 2;
  optional TransferState state = 3;

  optional string bucket = 4;
  optional string objectName = 5;

  optional string remotePath = 6;
  optional TransferDirection direction = 7;

  optional uint64 totalSize = 8;
  optional uint64 sizeTransferred = 9;
  optional bool reliable = 10;
}

message CreateTransferRequest {
  message UploadOptions {
    optional bool overwrite = 1;
    optional bool createPath = 2;
    optional bool reliable = 3;
  }
  message DownloadOptions {
  }

  optional string instance = 1;
  optional TransferDirection direction = 2;
  optional string bucket = 3;
  optional string objectName = 4;
  optional string remotePath = 5;
  optional DownloadOptions downloadOptions = 6;
  optional UploadOptions uploadOptions = 7;
}

message EditTransferRequest {
  optional string instance = 1;
  optional int64 id = 2;
  optional string operation = 3;
}

message ListTransfersRequest {
  optional string instance = 1;
}

message GetTransferRequest {
  optional string instance = 1;
  optional int64 id = 2;
}

//message sent as the response to the transfer listing
message ListTransfersResponse {
  repeated TransferInfo transfer = 1;
}

//message sent as the reponse to the list call
message ListRemoteFilesResponse {
  required string remotePath = 1;
  repeated RemoteFile filepaths = 2;
}
