package yamcsManagement;
option java_package = "org.yamcs.protobuf";

/* Yamcs Management structures and services */
/* Services are used just for reference, no code is being generated (yet) */

import "yamcs.proto";

/*service states coming from guava (numbers have to correspond)*/
enum ServiceState {
   NEW = 0;
   STARTING = 1;
   RUNNING = 2;
   STOPPING = 3;
   TERMINATED = 4;
   FAILED = 5;
}

/************** Yamcs Processor Control service *********************/
/* The ProcessorInfo and ClientInfo events are posted on the yprocInfo address. 
 * There is also a queue with the same name containing the last values
 * The name of the events are yProcessorUpdated (means added or updated),
 * yProcessorRemoved, clientUpdated (means connected or updated) clientDisconnected */
message ProcessorInfo {
    required string instance=1;//yamcs instance 
    required string name=2;
    optional string type=3;
    optional string spec=4;
    optional string creator=5;
    optional bool hasCommanding=6;
    optional ServiceState state=7;
    optional yamcs.ReplayRequest replayRequest=8; //in case of replay 
    optional yamcs.ReplayStatus.ReplayState replayState=9; //in case of replay 
}

message ClientInfo {
    required string instance=1;
    required int32 id=2;
    optional string username=3;
    optional string applicationName=4;
    optional string processorName=5;
}
message TmStatistics {
    required string packetName=1;
    optional int64 receivedPackets=2;
    optional int64 lastReceived=3; 
    optional int64 lastPacketTime=4;
    optional int32 subscribedParameterCount=5;
}

message Statistics {
    required string instance=1;
    required string yProcessorName=2;
    repeated TmStatistics tmstats=3;
    optional int64 lastUpdated=4; //java local time of the last update
}

message ProcessorRequest { //this is used for ProcessorControl service
    enum Operation {
         CREATE = 0;
         CONNECT_TO_PROCESSOR = 1;
         PAUSE = 2;
         RESUME = 3;
         SEEK = 4;
    }
    required string instance=1; //yamcs instance
    required string name=2; //processor name
    optional string type=3; //only for CREATE
    optional string spec=4; //only for CREATE
    optional bool persistent=5[default=false]; //only for CREATE
    repeated int32 clientId=6; //for CreateProcessor and CONNECT_TO_PROCESSOR
    optional int64 seekTime=7; //for SEEK
    optional Operation operation = 8;
}

//this is obsolete (but still implemented in HornetQ)
// the operations shall be specified using the ProcessorRequest.Operation defined above
service ProcessorControl {
  rpc CreateProcessor(ProcessorRequest) returns (yamcs.Void);
  rpc ConnectToProcessor(ProcessorRequest) returns (yamcs.Void);
  rpc PauseProcessor(ProcessorRequest) returns (yamcs.Void);
  rpc ResumeProcessor(ProcessorRequest) returns (yamcs.Void);
  rpc SeekProcessor(ProcessorRequest) returns (yamcs.Void);
}

/************** Link Control ****************************/
/*these messages are posted on the linkInfo address.
  there is also a linkInfo queue that contains the last values
*/
message LinkInfo {
    required string instance=1;
    required string name=2;
    optional string type=3;
    optional string spec=4;
    optional string stream=5;
    optional bool disabled=6;
    optional string status=7;
    optional int64 dataCount=8;
    optional string detailedStatus=9;
}

