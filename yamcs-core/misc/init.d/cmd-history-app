#!/bin/sh
### BEGIN INIT INFO
# Provides:          cmd-hist-app
# Required-Start:    $network $remote_fs yamcs-cis-server
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Description:       Start the command history application
### END INIT INFO
#
YAMCS_USER=yamcs
YAMCS_HOME=/opt/yamcs
CMDHISTAPP_BIN=$YAMCS_HOME/bin/cmd-history-app.sh
PID_FILE=/var/run/cmd-history-app.pid
STARTUPNAME=manychannels
OUTERR=$YAMCS_HOME/log/cmd-history-app.out # standard out and err go here

test -x $CMDHISTAPP_BIN || { echo "$CMDHISTAPP_BIN not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

function is_running {
    pid=$1
    return $((1 - `ps ww -p $pid -o args= | grep -c "java.*usoctools.CommandHistoryApp"`))
}

. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting cmd-history-app  "
	alreadyrunning=0
	if [ -s $PID_FILE ] ; then
	    pid=`cat $PID_FILE`
	    if is_running $pid ; then
		alreadyrunning=1
		echo -n "already running (pid=$pid)"
		rc_failed 0
	    else
		rm $PID_FILE
	    fi
	fi
	
	if [ $alreadyrunning -eq 0 ] ; then
	    touch $PID_FILE
	    chown $YAMCS_USER $PID_FILE
	    x=`grep "^startup.$STARTUPNAME.name" $YAMCS_HOME/etc/startup.properties | awk -F "=" '{print $2'} | grep -v lounge`
            while read c ; do
	    	channels="$channels \"$c\""
	    done <<< "$x"
	    echo -n $channels
	    if [ -f $OUTERR ] ; then mv $OUTERR $OUTERR.old ; fi
	    su - $YAMCS_USER sh -c "YAMCS_DAEMON=1; export YAMCS_DAEMON; nohup $CMDHISTAPP_BIN localhost 8060 $channels >$OUTERR  2>&1 & echo \$! >$PID_FILE"
	    pid=`cat $PID_FILE`
	    i=0
	    while [ $i -lt 5 ] ; do
		if is_running $pid ; then
		    startup=`grep cmdhistappstartup $OUTERR`
		    if [ "$startup" != "" ] ; then
			stat=`echo $startup | cut -d " " -f 2`
			if [ $stat = "success" ] ; then
			    rc_failed 0
			else
			    echo $startup | cut -d " " -f 3-
			    rc_failed 1
			fi
			break
		    fi
		fi
		sleep 1
		i=$((i+1))
	    done
	    if [ $i -eq 5 ] ; then 
		tail -1 $OUTERR
		rc_failed 1
	    fi
	fi

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down cmd-history-app...  "
	if [ -s $PID_FILE ] ; then
	    pid=`cat $PID_FILE`
	    i=0
	    if is_running $pid ; then
		kill -TERM $pid
		while [ $i -lt 5 ] ; do
		    if is_running $pid ; then
			kill -TERM $pid
		    else
			rm $PID_FILE
			break
		    fi
		    sleep 1
		    i=$((i+1))
		done

		if [ $i -eq 5 ] ; then 
		    echo -n timeout
		    rc_failed 1
		fi
	    else
		echo -n "not running"	
	    fi
	else
	    echo "not running ($PID_FILE doesn't exist)"	
	fi
	rc_status -v
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    status)
	echo -n "Checking for cmd-history-app... "

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	if [ -s $PID_FILE ] ; then
	    pid=`cat $PID_FILE`
	    if is_running $pid ; then 
		rc_failed 0
	    else
		rc_failed 1
	    fi
	else 
	    rc_failed 3
	fi
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|restart|status}"
	exit 1
	;;
esac
rc_exit
