/* Generated By:JavaCC: Do not edit this line. StreamSqlParserTokenManager.java */
package org.yamcs.yarch.streamsql;
import java.io.Reader;
import java.io.FileInputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.yamcs.utils.parser.Token;
import org.yamcs.utils.parser.SimpleCharStream;
import org.yamcs.utils.parser.ParseException;
import org.yamcs.yarch.*;
import org.yamcs.yarch.streamsql.funct.*;
import org.yamcs.yarch.TableWriter.InsertMode;
import org.yamcs.yarch.TableDefinition.PartitionStorage;

/** Token Manager. */
public class StreamSqlParserTokenManager implements StreamSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x4L) != 0L)
            return 10;
         if ((active2 & 0x20L) != 0L)
            return 13;
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x3fffffffffffL) != 0L)
         {
            jjmatchedKind = 118;
            return 32;
         }
         return -1;
      case 1:
         if ((active0 & 0x803ff00000031800L) != 0L || (active1 & 0xfL) != 0L)
            return 32;
         if ((active0 & 0x7fc00ffffffce7e0L) != 0L || (active1 & 0x3ffffffffff0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 1;
            }
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x73878ffffffee160L) != 0L || (active1 & 0x3dfffff67fcdL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return 21;
         }
         if ((active0 & 0xc58000000001680L) != 0L || (active1 & 0x20000098030L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active0 & 0x6090021264060040L) != 0L || (active1 & 0x100700313101L) != 0L)
            return 32;
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 3;
            }
            return 21;
         }
         if ((active0 & 0x13078ded9bf8e120L) != 0L || (active1 & 0x2df8ffc64eecL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 3;
            }
            return 32;
         }
         return -1;
      case 4:
         if ((active0 & 0x4301810000080100L) != 0L || (active1 & 0x2c00e1400804L) != 0L)
            return 32;
         if ((active0 & 0x10060ceddbf0e020L) != 0L || (active1 & 0x1fc1c8646e8L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x202000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 21;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x242000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 5;
            }
            return 21;
         }
         if ((active0 & 0x10000800cbb0a020L) != 0L || (active1 & 0xc008046c8L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 5;
            }
            return 32;
         }
         if ((active0 & 0x6046d10404000L) != 0L || (active1 & 0x1f09c060020L) != 0L)
            return 32;
         if ((active0 & 0x400000000000L) != 0L)
            return 21;
         return -1;
      case 6:
         if ((active0 & 0x80a80a020L) != 0L || (active1 & 0x8004200L) != 0L)
            return 32;
         if ((active0 & 0x4008000100000L) != 0L || (active1 & 0x10242000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
            return 21;
         }
         if ((active0 & 0x10000800c1200000L) != 0L || (active1 & 0xc008004c8L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
            return 32;
         }
         return -1;
      case 7:
         if ((active0 & 0x10000000c0000000L) != 0L || (active1 & 0x800408L) != 0L)
            return 32;
         if ((active0 & 0x80001200000L) != 0L || (active1 & 0xc000000c0L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x4008000100000L) != 0L || (active1 & 0x10242000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
            return 21;
         }
         return -1;
      case 8:
         if ((active0 & 0x4008000100000L) != 0L || (active1 & 0x10242000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 8;
            }
            return 21;
         }
         if ((active0 & 0x200000L) != 0L || (active1 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 8;
            }
            return 32;
         }
         if ((active0 & 0x80001000000L) != 0L || (active1 & 0x4000000c0L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x4008000100000L) != 0L || (active1 & 0x10a42000080L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 9;
            return 21;
         }
         if ((active0 & 0x200000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active0 & 0x4000000100000L) != 0L || (active1 & 0x10a42000080L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
            return 21;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 21;
         return -1;
      case 11:
         if ((active0 & 0x4000000100000L) != 0L || (active1 & 0x10a00000080L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 11;
            return 21;
         }
         if ((active1 & 0x42000000L) != 0L)
            return 21;
         return -1;
      case 12:
         if ((active0 & 0x4000000100000L) != 0L || (active1 & 0x10000000000L) != 0L)
            return 21;
         if ((active1 & 0xa00000080L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 12;
            return 21;
         }
         return -1;
      case 13:
         if ((active1 & 0x200000000L) != 0L)
            return 21;
         if ((active1 & 0x800000080L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 13;
            return 21;
         }
         return -1;
      case 14:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 14;
            return 21;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 21;
         return -1;
      case 15:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 15;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 134);
      case 40:
         return jjStopAtPos(0, 123);
      case 41:
         return jjStopAtPos(0, 124);
      case 42:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 43:
         return jjStopAtPos(0, 129);
      case 44:
         return jjStopAtPos(0, 125);
      case 45:
         return jjStartNfaWithStates_0(0, 130, 10);
      case 47:
         return jjStartNfaWithStates_0(0, 133, 13);
      case 59:
         return jjStopAtPos(0, 127);
      case 60:
         return jjStopAtPos(0, 136);
      case 61:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200L);
      case 62:
         return jjStopAtPos(0, 135);
      case 63:
         return jjStopAtPos(0, 122);
      case 91:
         return jjStopAtPos(0, 138);
      case 93:
         return jjStopAtPos(0, 139);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1fe0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3e000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc0000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3ff000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c00000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3ff00000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x180000000000000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x7800000000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x3fL, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000007c0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffe0000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x17e0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 62:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40007000000L, active1, 0x808e00208c0L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000078002000L, active1, 0xc7000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x300000600000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x180088080004000L, active1, 0x700100000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000080180L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1fc01c00000600L, active1, 0x2000000001L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000100308000L, active1, 0x18100L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c001000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20200400000L, active1, 0x60cL, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 32);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001000L, active1, 0x60000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1e000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000800000L, active1, 0x1000000030L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40040L, active1, 0x803000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0000000L);
      case 67:
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 32);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x4000000004L);
      case 69:
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x300003000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x42000000208L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000010100000L, active1, 0x80000040001L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000200000L, active1, 0x700020000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30200088000L, active1, 0x600400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x1000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000800000L, active1, 0x81c0001c0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x60800e0000000L, active1, 0x18000000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 32);
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000007022100L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000020L, active1, 0x4000L);
      case 87:
      case 119:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 32);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 32);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x12003404020L, active1, 0x4800000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 32);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 32);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 32);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 32);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 32);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7008010000100L, active1, 0x1860d044004L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x808L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100040c08000000L, active1, 0x10000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000008000L, active1, 0x10e0800000L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 32);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 78:
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x2020020L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x200000400000L);
      case 83:
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000000L, active1, 0x4c0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000100000L, active1, 0x80000000000L);
      case 87:
      case 119:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x202000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 68:
      case 100:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x8002000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 32);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 32);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 32);
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 32);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000080a000L, active1, 0x10c0000000L);
      case 71:
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0xc8L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000100000000L, active1, 0x820000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100000L, active1, 0x800000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40c00000020L, active1, 0x10000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 32);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000040204000L, active1, 0x18000004000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 32);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 32);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 32);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x4010400000L, active1, 0x4000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000020L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x9008000L, active1, 0x200000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 32);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 32);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 32);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 32);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 32);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 32);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x800202000L, active1, 0x800000000L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 32);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x42000000L, active1, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x80900000L, active1, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 32);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 32);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 32);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 32);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x104000000c0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 32);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000100000L, active1, 0x10000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000008L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 32);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 32);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 32);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 32);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 32);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x1200000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 89:
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4080000000000L, active1, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x8001000000L, active1, 0x800000000L);
      case 70:
      case 102:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000c0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 32);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 32);
         break;
      case 87:
      case 119:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 32);
         break;
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L);
      case 80:
      case 112:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x10000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x840000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000080L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 32);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L, active1, 0x40000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x10000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x240000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0x10002000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active1, 0x200000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x10000000000L);
      case 80:
      case 112:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 21);
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 94, 21);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 50, 21);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 104, 21);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000L);
      case 89:
      case 121:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 20, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(13, 97, 21);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x80L);
      case 69:
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 99, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa16_0(active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(16, 71, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
               case 21:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(21);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAddStates(6, 8);
                  break;
               case 2:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar != 39)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 7);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 7);
                  break;
               case 10:
                  if (curChar != 45)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddStates(9, 11);
                  break;
               case 16:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 18:
                  if (curChar == 47 && kind > 117)
                     kind = 117;
                  break;
               case 19:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 34 && kind > 121)
                     kind = 121;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(0, 5);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 0);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAddTwoStates(20, 21);
                  }
                  break;
               case 5:
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 7);
                  break;
               case 11:
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
               case 17:
                  jjCheckNAddTwoStates(17, 15);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(21);
                  break;
               case 23:
                  jjAddStates(15, 16);
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 7);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(17, 15);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   26, 27, 0, 28, 29, 30, 1, 2, 3, 15, 16, 18, 28, 29, 30, 23, 
   24, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\77", "\50", 
"\51", "\54", "\75", "\73", "\52\52", "\53", "\55", "\174\174", "\52", "\57", "\41", 
"\76", "\74", "\75\76", "\133", "\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xfe48ffffffffffffL, 0xfffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x30000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x30000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[32];
private final int[] jjstateSet = new int[64];
protected char curChar;
/** Constructor. */
public StreamSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public StreamSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
