/* Generated By:JavaCC: Do not edit this line. HlclCommandParser.java */
package org.yamcs.parser;
import org.yamcs.*;
import org.yamcs.commanding.TcParameterDefinition;
public class HlclCommandParser implements HlclCommandParserConstants {

        byte[] parseByteString(String s) throws ParseException{
                s=s.substring(2,s.length()-1).replace("_","").replace(" ",""); //remove the #" from beginning and " from end and then the _ and spaces
                if(s.length()%2!=0) {
                        ParseException e= new ParseException("the bytestring has to contain an even number of characters");
                        e.currentToken=token;
                        throw e;
                }
                byte[] b=new byte[s.length()/2];
                for(int i=0;i<s.length()/2;i++) {
                        b[i]=(byte)(Integer.parseInt(s.substring(2*i,2*i+2),16)&0xFF);
                }
                return b;
        }

        static Long parseBaseNumber(String s) {
                s=s.replace("_","");
                String[] a=s.split("#");
                int radix=Integer.parseInt(a[0]);
                return Long.valueOf(a[1],radix);
        }

        public static void main(String args[]) throws ParseException {
                String s="simpletc(arg1:12, arg2:33)";
                HlclCommandParser parser = new HlclCommandParser(new java.io.StringReader(s));
                parser.CmdString();
        }

  final public HlclParsedCommand CmdString() throws ParseException {
        Token t;
        HlclParsedCommand c=new HlclParsedCommand();
    if (jj_2_1(2)) {
      t = jj_consume_token(ID);
      c.parameterList = ParameterPart();
          c.commandName=t.image;
          {if (true) return c;}
      jj_consume_token(0);
    } else if (jj_2_2(2)) {
      t = jj_consume_token(PATHNAME);
      c.parameterList = ParameterPart();
          c.pathname=t.image;
          {if (true) return c;}
      jj_consume_token(0);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<HlclParsedParameter> ParameterPart() throws ParseException {
        java.util.ArrayList<HlclParsedParameter> parameterList;
    if (jj_2_3(2)) {
      jj_consume_token(13);
      parameterList = ParameterList();
      jj_consume_token(14);
                {if (true) return parameterList;}
    } else {
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public java.util.ArrayList<HlclParsedParameter> ParameterList() throws ParseException {
        java.util.ArrayList<HlclParsedParameter> parameterList = new java.util.ArrayList<HlclParsedParameter>();
        HlclParsedParameter p;
    if (jj_2_7(2)) {
      p = UnnamedParameterSpec();
          parameterList.add(p);
      label_1:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(15);
        p = UnnamedParameterSpec();
          parameterList.add(p);
      }
      label_2:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(15);
        p = NamedParameterSpec();
          parameterList.add(p);
      }
            {if (true) return parameterList;}
    } else if (jj_2_8(2)) {
      p = NamedParameterSpec();
          parameterList.add(p);
      label_3:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(15);
        p = NamedParameterSpec();
          parameterList.add(p);
      }
            {if (true) return parameterList;}
    } else {
            {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public HlclParsedParameter NamedParameterSpec() throws ParseException {
        Token t;
        HlclParsedParameter p;
    t = jj_consume_token(ID);
    jj_consume_token(16);
    p = ParameterValue();
          p.name=t.image;
          p.nameBeginLine=t.beginLine;
          p.nameBeginColumn=t.beginColumn;
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public HlclParsedParameter UnnamedParameterSpec() throws ParseException {
        HlclParsedParameter p;
    p = ParameterValue();
          p.name=null;
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public HlclParsedParameter ParameterValue() throws ParseException {
        Token t;
        HlclParsedParameter p=new HlclParsedParameter();
    if (jj_2_9(2)) {
      t = jj_consume_token(NUM);
          p.type=TcParameterDefinition.SwTypes.INTEGER_TYPE;
          p.value=Long.parseLong(t.image);
          p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
          {if (true) return p;}
    } else if (jj_2_10(2)) {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                p.type=TcParameterDefinition.SwTypes.REAL_TYPE;
                p.value=Double.parseDouble(t.image);
                p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
                {if (true) return p;}
    } else if (jj_2_11(2)) {
      t = jj_consume_token(HLCL_BASENUM);
                p.type=TcParameterDefinition.SwTypes.INTEGER_TYPE;
                p.value=parseBaseNumber(t.image);
                p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
                {if (true) return p;}
    } else if (jj_2_12(2)) {
      t = jj_consume_token(HLCL_STRING);
                p.type=TcParameterDefinition.SwTypes.STRING_TYPE;
                p.value=t.image.substring(1,t.image.length()-1).replace("\"\"","\"").getBytes();
                p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
                {if (true) return p;}
    } else if (jj_2_13(2)) {
      t = jj_consume_token(HLCL_BYTESTRING);
                p.type=TcParameterDefinition.SwTypes.BYTE_STRING_TYPE;
                p.value=parseByteString(t.image);
                p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
                {if (true) return p;}
    } else if (jj_2_14(2)) {
      t = jj_consume_token(HLCL_STATECODE);
                p.type=TcParameterDefinition.SwTypes.STATE_CODE_TYPE;
                p.value=t.image.substring(1,t.image.length());
                p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
                {if (true) return p;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(PATHNAME)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(HLCL_STATECODE)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(HLCL_BYTESTRING)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(HLCL_STRING)) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) return true;
    }
    return false;
  }

  final private boolean jj_3R_9() {
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(HLCL_BASENUM)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  public HlclCommandParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public HlclCommandParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public HlclCommandParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HlclCommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public HlclCommandParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HlclCommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public HlclCommandParser(HlclCommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(HlclCommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[17];
    for (int i = 0; i < 17; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
