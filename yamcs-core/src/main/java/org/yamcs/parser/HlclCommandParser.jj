PARSER_BEGIN(HlclCommandParser)
package org.yamcs.parser;
import org.yamcs.*;
public class HlclCommandParser {

	byte[] parseByteString(String s) throws ParseException{
		s=s.substring(2,s.length()-1).replace("_","").replace(" ",""); //remove the #" from beginning and " from end and then the _ and spaces
		if(s.length()%2!=0) {
			ParseException e= new ParseException("the bytestring has to contain an even number of characters");
			e.currentToken=token;
			throw e;
		}
		byte[] b=new byte[s.length()/2];
		for(int i=0;i<s.length()/2;i++) {
			b[i]=(byte)(Integer.parseInt(s.substring(2*i,2*i+2),16)&0xFF);
		}
		return b;
	}
  
	static Long parseBaseNumber(String s) {
		s=s.replace("_","");
		String[] a=s.split("#");
		int radix=Integer.parseInt(a[0]);
		return Long.valueOf(a[1],radix);
	}
  
	public static void main(String args[]) throws ParseException {
		String s="simpletc(arg1:12, arg2:33)";
		HlclCommandParser parser = new HlclCommandParser(new java.io.StringReader(s));
		parser.CmdString();
	}

}

PARSER_END(HlclCommandParser)

SKIP :
{
  " "
| "\t"
| "\n"
}

TOKEN :
{
  < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
|
  < NUM: ("-")? ( ["0"-"9","_"] )+ >
|
  < FLOATING_POINT_LITERAL:
        ("-")? (["0"-"9"]) (["0"-"9","_"])* "." (["0"-"9","_"])* (<EXPONENT>)?
      | ("-")? "." (["0"-"9","_"])+ (<EXPONENT>)?
      | ("-")? (["0"-"9","_"])+ (<EXPONENT>)?
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < HLCL_BYTESTRING: "#\""( ["0"-"9","A"-"F","a"-"f"," ","_"] )* "\"">
|
  < HLCL_BASENUM: (["0"-"9"])+ "#" ( ["0"-"9","A"-"F","a"-"f","_"] )+ "#">
|
  < HLCL_STRING:
      "\""
      (   (~["\"","\n","\r"])
        | ("\"" "\"")
      )*
      "\""
  >
|
  < PATHNAME: "\\" (["a"-"z","A"-"Z","_","\\","0"-"9"])* > //this is a bit buggy because the pathnames should not contain digits or underscores after the backslash, nor should they contain two backslashes one after the other
|
  < HLCL_STATECODE: "$" ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
}

HlclParsedCommand CmdString() :
{
	Token t;
	HlclParsedCommand c=new HlclParsedCommand();
}
{
   t=<ID> c.parameterList=ParameterPart()
	{
	  c.commandName=t.image;
	  return c;
	}
  <EOF>
|
   t=<PATHNAME> c.parameterList=ParameterPart()
	{
	  c.pathname=t.image;
	  return c;
	}
  <EOF>
}

java.util.ArrayList<HlclParsedParameter> ParameterPart() :
{
	java.util.ArrayList<HlclParsedParameter> parameterList;
}
{
	"(" parameterList = ParameterList() ")"
	{
		return parameterList;
	}
|
	{
		return null;
	}
}

java.util.ArrayList<HlclParsedParameter> ParameterList() :
{
	java.util.ArrayList<HlclParsedParameter> parameterList = new java.util.ArrayList<HlclParsedParameter>();
	HlclParsedParameter p;
}
{
   p=UnnamedParameterSpec() {
	  parameterList.add(p);
	}
  ( "," p=UnnamedParameterSpec() {
	  parameterList.add(p);
	}
  )* 
  ( "," p=NamedParameterSpec() {
	  parameterList.add(p);
	}
  )*
    {
            return parameterList;
	}
|
  p=NamedParameterSpec() {
	  parameterList.add(p);
	}
  ( "," p=NamedParameterSpec() {
	  parameterList.add(p);
	}
  )* 
    {
            return parameterList;
	}
|
	{
	    return null;
	}
}

HlclParsedParameter NamedParameterSpec() :
{
	Token t;
	HlclParsedParameter p;
}
{
  t=<ID> ":" p=ParameterValue()
	{
	  p.name=t.image;
	  p.nameBeginLine=t.beginLine;
	  p.nameBeginColumn=t.beginColumn;
	  return p;
	}
}

HlclParsedParameter UnnamedParameterSpec() :
{
	HlclParsedParameter p;
}
{
  p=ParameterValue()
	{
	  p.name=null;
	  return p;
	}

}

HlclParsedParameter ParameterValue() :
{
	Token t;
	HlclParsedParameter p=new HlclParsedParameter();
}
{
  t=<NUM> {
  	  p.type=TcParameterDefinition.SwTypes.INTEGER_TYPE;
  	  p.value=Long.parseLong(t.image);
	  p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
	  return p;
	}
|
  t=<FLOATING_POINT_LITERAL> {
  	  	p.type=TcParameterDefinition.SwTypes.REAL_TYPE;
  	  	p.value=Double.parseDouble(t.image);
		p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
	  	return p;
	}
|
  t=<HLCL_BASENUM> {
  		p.type=TcParameterDefinition.SwTypes.INTEGER_TYPE;
  		p.value=parseBaseNumber(t.image);
		p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
		return p;
	}
|
  t=<HLCL_STRING> {
  		p.type=TcParameterDefinition.SwTypes.STRING_TYPE;
  		p.value=t.image.substring(1,t.image.length()-1).replace("\"\"","\"").getBytes();
		p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
		return p;
	}
|
  t=<HLCL_BYTESTRING> {
  		p.type=TcParameterDefinition.SwTypes.BYTE_STRING_TYPE;
  		p.value=parseByteString(t.image);
		p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
		return p;
	}
|
  t=<HLCL_STATECODE> {
  		p.type=TcParameterDefinition.SwTypes.STATE_CODE_TYPE;
  		p.value=t.image.substring(1,t.image.length());
		p.valueBeginLine=t.beginLine;  p.valueBeginColumn=t.beginColumn;
		return p;
	}

}
