#!/bin/sh

# Variables
# ---------
# DO NOT MODIFY THIS FILE
# Instead set variables via a script YAMCS_HOME/bin/setenv.sh
#
# JMX           Set to 1 to allow remote JMX connections (jconsole).
#               (only temporarily for debugging purposes !)
#
# JAVA_OPTS     Java runtime options

# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done

# Get standard environment variables
PRGDIR=`dirname "$PRG"`
YAMCS_HOME=`cd "$PRGDIR/.." ; pwd`

ETC_DIR="$YAMCS_HOME/etc"
while [ $# -gt 0 ]; do
  if [[ $1 == "--etc-dir" ]]; then
    ETC_DIR="$2"
    shift
  else
    echo "Usage: $0 [--etc-dir DIR]"
    exit 1;
  fi
  shift
done

if [ ! -d "$ETC_DIR" ]; then
  echo "Configuration directory '$ETC_DIR' does not exist"
  exit 1;
fi

# Convert to absolute path
ETC_DIR=`cd $ETC_DIR; pwd`

# cd into YAMCS_HOME to support relative links in configuration files
cd "$YAMCS_HOME"

if [ -r bin/setenv.sh ]; then
  . bin/setenv.sh
fi

# Add all necessary jars
CLASSPATH="$YAMCS_HOME/lib/*:$YAMCS_HOME/lib/ext/*"

# Add etc directory to load config resources
if [ -z "$ETC_DIR" ]; then
  CLASSPATH=$YAMCS_HOME/etc:$CLASSPATH
else
  CLASSPATH=$ETC_DIR:$CLASSPATH
fi

export CLASSPATH

if [ -d "$JAVA_HOME" ]; then
  _RUNJAVA="$JAVA_HOME/bin/java"
else
  _RUNJAVA=java
fi

if [ "$JMX" = 1 ]; then
  JMX_OPTS="-Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
fi

"$_RUNJAVA" $JAVA_OPTS $JMX_OPTS \
    -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ \
    -Djxl.nowarnings=true \
    -Djava.util.logging.config.file=$ETC_DIR/logging.properties \
    -Djacorb.home=$YAMCS_HOME \
    -Djavax.net.ssl.trustStore=$ETC_DIR/trustStore \
    org.yamcs.YamcsServer
