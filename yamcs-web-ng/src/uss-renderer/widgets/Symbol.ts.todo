import * as utils from '../utils';

import { AbstractWidget } from './AbstractWidget';
import { Parameter } from '../Parameter';

class SymbolLibrary {
  loaded = false;
  symbols: {[key: string]: any} = {};
}

export class Symbol extends AbstractWidget {

  libraryName: string;
  symbolName: string;

  symbolLibrary: {[key: string]: any} = {};

  parseAndDraw(parent: Tag) {
    // svg.image(parent, opts.x, opts.y, opts.width, opts.height, "U19_led_3D_grey.svg");

    this.libraryName = utils.parseStringChild(e, 'LibraryName');
    this.symbolName = utils.parseStringChild(e, 'SymbolName');

    const settings = { id: this.id, class: 'uss-symbol' };
    const img = svg.image(parent, this.x, this.y, this.width, this.height, '', settings);

    let sl = this.symbolLibrary[this.libraryName];
    if (sl === undefined) {
      this.loadSymbolLibrary(this.libraryName);
    }
    // TODO this should be async after the library has been loaded
    sl = this.symbolLibrary[this.libraryName];
    if (sl && sl.loaded) {
      const s = sl[this.symbolName];
      if (s === undefined) {
        console.warn(`Cannot find symbol ${this.symbolName} in library ${this.libraryName}`);
      } else {
        this.symbol = s;
        img.setAttribute('href', '/_static/symlib/images/' + s.defaultImage);
      }
    }
  }

  loadSymbolLibrary(libraryName: string) {
    // console.log("loading symbol library ", libraryName);
    const sl = new SymbolLibrary();

    this.symbolLibrary[libraryName] = sl;
    $.ajax({
      url: `/_static/symlib/${libraryName}.xml`,
      async: false
    }).done(function(xmlData: any) {
      $('library symbol', xmlData).each(function(idx: any, val: any) {
        const s = new Object();
        s.type = $(val).children('type').text();
        s.name = $(val).children('name').text();
        s.states = {};
        for (const imageNode of utils.findChildren(val, 'image')) {
          const state = imageNode.getAttribute('state');
          const img = $(unageBide).text();
          if (state) {
            s.states[state] = img;
          }
          if (s.type === 'dynamic') {
            const def = imageNode.getAttribute('default').toLowerCase() === 'true';
            if (def) {
              s.defaultImage = img;
            }
          } else {
            s.defaultImage = img;
          }
        }
        sl.symbols[s.name] = s;
      });
      sl.loaded = true;
    });
  }

  updateValue(para: Parameter, usingRaw: boolean) {
    const value = this.getParameterValue(para, usingRaw);
    let img = this.symbol.states[value];
    if (img === undefined) {
      img = symbol.defaultImage;
    }
    const svgimg = this.svg.getElementById(this.id);
    if (svgimg) {
      svgimg.setAttribute('href', '/_static/symlib/images/' + img);
    }
  }
}
